* Scheme compiler
Using the paper-like version (p), with clarification from the book-like version (b).

** Step 0 - basics
*** Implement test.c: scheme_entry() (3.1)
	.text
	.align 4,0x90
.globl _scheme_entry
_scheme_entry:
	movl	$42, %eax
	ret
	.subsections_via_symbols
*** Implement compiler.py (3.1)
#!/usr/bin/env python
def compile_program(x):
    emit_function_header("scheme_entry")
    print "    movl $%d, %%eax" % x
    print "    ret"

def emit_function_header(function_name):
    print ".globl _%s" % function_name
    print "_%s:" % function_name

compile_program(42)
*** Implement runtime.c (3.1)
/* a simple driver for scheme_entry */
#include <stdio.h>
int main(int argc, char** argv) {
    printf("%d\n", scheme_entry());
    return 0;
}
*** test
$ ./compiler.py > ctest.s
$ gcc -o stst runtime.c ctest.s
$ ./stst
42
** Step 1 - Integers (3.1)
Used (p) only.
No issues. Wrote simple gcc wrapper based directly off the scheme example.
Actually wrote the integer part of 3.2 by mistake.
** Step 2 - Immediate Constants (3.2)
Used (p) only.
isinstance(False, int) is True, so check for bools before ints.
Case in runtime.c to print char values for space, newline, tab, return.
** Step 3 - Unary Primitives (3.3)
Started with (p). Shifted to (b) for fixnum?
Mostly worked with (b).
** Step 4 - And
Not really in docs, just in tests. Needs labels, but no stack.
** Step 5 - If
Implemented 'if'. Sort-of from (b), but easy after 'and'
$fxsub1 needed for 'and' tests.
Implemented 'or' just for kicks.

* Scheme compiler

Using the paper-like version (p), with clarification from the book-like version (b).

** Notes
*** Implement test.c: scheme_entry() (3.1)
	.text
	.align 4,0x90
.globl _scheme_entry
_scheme_entry:
	movl	$42, %eax
	ret
	.subsections_via_symbols
*** Implement compiler.py (3.1)
#!/usr/bin/env python
def compile_program(x):
    emit_function_header("scheme_entry")
    print "    movl $%d, %%eax" % x
    print "    ret"

def emit_function_header(function_name):
    print ".globl _%s" % function_name
    print "_%s:" % function_name

compile_program(42)
*** Implement runtime.c (3.1)
/* a simple driver for scheme_entry */
#include <stdio.h>
int main(int argc, char** argv) {
    printf("%d\n", scheme_entry());
    return 0;
}
*** test
$ ./compiler.py > ctest.s
$ gcc -o stst runtime.c ctest.s
$ ./stst
42
